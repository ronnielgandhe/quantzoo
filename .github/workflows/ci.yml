name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 quantzoo --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 quantzoo --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check quantzoo tests
    
    - name: Check import sorting with isort
      run: |
        isort --check-only quantzoo tests
    
    - name: Type checking with mypy
      run: |
        mypy quantzoo --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=quantzoo --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Smoke test - Run backtest
      run: |
        qz run -c configs/mnq_808.yaml -s 1
    
    - name: Verify artifacts were created
      run: |
        ls -la artifacts/
        test -f artifacts/results.csv
        test -f artifacts/metrics.json
    
    - name: Smoke test - Generate report
      run: |
        # Extract run ID from metrics.json
        RUN_ID=$(python -c "import json; data=json.load(open('artifacts/metrics.json')); print(list(data.keys())[0])")
        qz report -r $RUN_ID
    
    - name: Verify report was created
      run: |
        ls -la reports/
        test -f reports/backtest_report_*.md